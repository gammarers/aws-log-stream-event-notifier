// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LogStreamEventNotifier default Testing Should match snapshot 1`] = `
{
  "Mappings": {
    "ServiceprincipalMap": {
      "af-south-1": {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-south-2": {
        "states": "states.ap-south-2.amazonaws.com",
      },
      "ap-southeast-1": {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ap-southeast-4": {
        "states": "states.ap-southeast-4.amazonaws.com",
      },
      "ca-central-1": {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-central-2": {
        "states": "states.eu-central-2.amazonaws.com",
      },
      "eu-north-1": {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "il-central-1": {
        "states": "states.il-central-1.amazonaws.com",
      },
      "me-central-1": {
        "states": "states.me-central-1.amazonaws.com",
      },
      "me-south-1": {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": {
        "states": "states.amazonaws.com",
      },
      "us-west-1": {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "Function76856677": {
      "DependsOn": [
        "FunctionServiceRole675BB04A",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async (event, context) => JSON.parse("{}");",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "FunctionServiceRole675BB04A",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "FunctionServiceRole675BB04A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogStreamEventNotifierLambdaFunctionLogSubscriptionFuncSuccessRule4992E51C": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "requestContext": {
              "functionArn": [
                {
                  "wildcard": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "Function76856677",
                            "Arn",
                          ],
                        },
                        ":*",
                      ],
                    ],
                  },
                },
              ],
            },
          },
          "detail-type": [
            "Lambda Function Invocation Result - Success",
          ],
          "source": [
            "lambda",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "LogStreamEventNotifierNotifierStateMachine7BF529E8",
            },
            "Id": "Target0",
            "RoleArn": {
              "Fn::GetAtt": [
                "LogStreamEventNotifierStartExecMachineRole87239070",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "LogStreamEventNotifierNotifierStateMachine7BF529E8": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "LogStreamEventNotifierNotifierStateMachineRoleDefaultPolicy02CF583F",
        "LogStreamEventNotifierNotifierStateMachineRoleC4778DA6",
      ],
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"Init","States":{"Init":{"Type":"Pass","Result":"","ResultPath":"$.Prepare.Concatenated.StackTrace","Next":"GetLogEvents"},"GetLogEvents":{"Type":"Pass","ResultPath":"$.Temp.Log","Parameters":{"Events.$":"$.detail.responsePayload.logEvents"},"Next":"CheckUntreatedLogEventDetailExist"},"CheckUntreatedLogEventDetailExist":{"Type":"Choice","Choices":[{"Variable":"$.Temp.Log.Events[0]","IsPresent":true,"Next":"GetLogEventDetail"}],"Default":"Succeed"},"GetUntreatedMessages":{"Type":"Pass","ResultPath":"$.TempStackTrace","Parameters":{"Lines.$":"$.TempStackTrace.Lines[1:]"},"Next":"CheckUntreatedLogEventDetailExist"},"SendNotification":{"Next":"GetUntreatedMessages","Type":"Task","InputPath":"$.Prepare.Sns.Topic","ResultPath":"$.Result.Sns.Topic","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::sns:publish","Parameters":{"TopicArn":"",
              {
                "Ref": "TopicBFC7AF6E",
              },
              "","Message.$":"$.Message","Subject.$":"$.Subject"}},"PrepareErrorTextMessage":{"Type":"Pass","ResultPath":"$.Prepare.Sns.Topic","Parameters":{"Subject.$":"States.Format('ðŸ˜µ[{}] AWS Lambda Function Invocation {} Log Found [{}][{}]', $.Temp.Log.Parsed.level, $.Temp.Log.Parsed.level, $.account, $.region)","Message.$":"States.Format('Account : {}\\nRegion : {}\\nLogGroup : {}\\nLogStream : {}\\nLogLevel : {}\\nTimestamp : {}\\nRequestId : {}\\nErrorType : {}\\nErrorMessage : {}\\nStackTrace : \\n{}', $.account, $.region, $.detail.responsePayload.logGroup, $.detail.responsePayload.logStream, $.Temp.Log.Parsed.level, $.Temp.Log.Parsed.timestamp, $.Temp.Log.Parsed.requestId, $.Temp.Log.Parsed.message.errorType, $.Temp.Log.Parsed.message.errorMessage, $.Prepare.Concatenated.StackTrace)"},"Next":"SendNotification"},"PrepareOtherTextMessage":{"Type":"Pass","ResultPath":"$.Prepare.Sns.Topic","Parameters":{"Subject.$":"States.Format('ðŸ˜µ[{}] AWS Lambda Function Invocation {} Log Found [{}][{}]', $.Temp.Log.Parsed.level, $.Temp.Log.Parsed.level, $.account, $.region)","Message.$":"States.Format('Account : {}\\nRegion : {}\\nLogGroup : {}\\nLogStream : {}\\nLogLevel : {}\\nTimestamp : {}\\nRequestId : {}\\nMessage : {}', $.account, $.region, $.detail.responsePayload.logGroup, $.detail.responsePayload.logStream, $.Temp.Log.Parsed.level, $.Temp.Log.Parsed.timestamp, $.Temp.Log.Parsed.requestId, $.Temp.Log.Parsed.message)"},"Next":"SendNotification"},"Succeed":{"Type":"Succeed"},"GetLogEventDetail":{"Type":"Pass","ResultPath":"$.Temp.Log.Event","Parameters":{"Detail.$":"States.ArrayGetItem($.Temp.Log.Events, 0)"},"Next":"GetLogEventMessage"},"GetLogEventMessage":{"Type":"Pass","ResultPath":"$.Temp.Log","Parameters":{"Parsed.$":"States.StringToJson($.Temp.Log.Event.Detail.message)"},"Next":"LogLevelChoice"},"LogLevelChoice":{"Type":"Choice","Choices":[{"Variable":"$.Temp.Log.Parsed.level","StringEquals":"ERROR","Next":"GetLogEventMessageStackTrace"}],"Default":"PrepareOtherTextMessage"},"GetLogEventMessageStackTrace":{"Type":"Pass","ResultPath":"$.Temp.StackTrace","Parameters":{"Lines.$":"$.Temp.Log.Parsed.message.stackTrace"},"Next":"CheckUntreatedMessageStackTraceLinesExist"},"CheckUntreatedMessageStackTraceLinesExist":{"Type":"Choice","Choices":[{"Variable":"$.Temp.StackTrace.Lines[0]","IsPresent":true,"Next":"GetLogEventMessageStackTraceLine"}],"Default":"PrepareErrorTextMessage"},"UntreatedMessageTraceLines":{"Type":"Pass","ResultPath":"$.Temp.StackTrace","Parameters":{"Lines.$":"$.Temp.StackTrace.Lines[1:]"},"Next":"CheckUntreatedMessageStackTraceLinesExist"},"ConcatenateStackTraceLine":{"Type":"Pass","ResultPath":"$.Prepare.Concatenated","Parameters":{"StackTrace.$":"States.Format('{}{}\\n', $.Prepare.Concatenated.StackTrace, $.Temp.GetStackTrace.Line)"},"Next":"UntreatedMessageTraceLines"},"GetLogEventMessageStackTraceLine":{"Type":"Pass","ResultPath":"$.Temp.GetStackTrace","Parameters":{"Line.$":"States.ArrayGetItem($.Temp.StackTrace.Lines, 0)"},"Next":"ConcatenateStackTraceLine"}},"TimeoutSeconds":300}",
            ],
          ],
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "LogStreamEventNotifierNotifierStateMachineRoleC4778DA6",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "LogStreamEventNotifierNotifierStateMachineRoleC4778DA6": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::FindInMap": [
                    "ServiceprincipalMap",
                    {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LogStreamEventNotifierNotifierStateMachineRoleDefaultPolicy02CF583F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "TopicBFC7AF6E",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogStreamEventNotifierNotifierStateMachineRoleDefaultPolicy02CF583F",
        "Roles": [
          {
            "Ref": "LogStreamEventNotifierNotifierStateMachineRoleC4778DA6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LogStreamEventNotifierStartExecMachineRole87239070": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "lambda func log subscription notification start exec machine (send notification).",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "states:StartExecution",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "states-start-execution-policy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogStreamEventNotifierStartExecMachineRoleDefaultPolicyF28677A4": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "LogStreamEventNotifierNotifierStateMachine7BF529E8",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogStreamEventNotifierStartExecMachineRoleDefaultPolicyF28677A4",
        "Roles": [
          {
            "Ref": "LogStreamEventNotifierStartExecMachineRole87239070",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TopicBFC7AF6E": {
      "Type": "AWS::SNS::Topic",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
